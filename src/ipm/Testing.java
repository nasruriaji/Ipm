/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ipm;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author David
 */
public class Testing extends javax.swing.JFrame {
    
    private DefaultTableModel tbDataPrediksi;
    
    public Testing() {
        initComponents();
        
        tbDataPrediksi = new DefaultTableModel();
        
        jTable1.setModel(tbDataPrediksi);
        tbDataPrediksi.addColumn("Tahun");
        tbDataPrediksi.addColumn("Target");
        tbDataPrediksi.addColumn("Prediksi");
        tbDataPrediksi.addColumn("Selisih");
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton2.setText("Uji");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Data Latih", "Data Uji" }));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, 0, 99, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)))
                .addContainerGap(79, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        tbDataPrediksi.getDataVector().removeAllElements();
        tbDataPrediksi.fireTableDataChanged();
        
        double xNorm[][] = new double[50][50];
        double x[][] = new double[50][50];
        double t[] = new double[50];
        double prediksi[] = new double[50];
        
        int n = 0;
        try {
            Statement stm = Koneksi.getConn().createStatement();
            ResultSet rsl = stm.executeQuery("select * from data_ipm");
            
            while (rsl.next()) {
                xNorm[n][0] = rsl.getDouble("t5");
                xNorm[n][1] = rsl.getDouble("t4");
                xNorm[n][2] = rsl.getDouble("t3");
                xNorm[n][3] = rsl.getDouble("t2");
                xNorm[n][4] = rsl.getDouble("t1");
                xNorm[n][5] = rsl.getDouble("t");
                n++;
            }
        
            rsl.close();
            stm.close();
        } catch (SQLException e) {
            System.out.println("Gagal"+e);
        }
        
        Storage str = new Storage();
        int countRecords = str.countRecords();
        double setting[] = str.readSetting();
        
        double nilai_max = setting[2];
        double nilai_min = setting[1];
        double neuron_hidden = setting[0];
        int neuron_output = 1;
        int neuron_input = 5;
        double selisih[] = new double[50];
        
        for (int i = 0; i < countRecords; i++) {
            for (int j = 0; j < 6; j++) {
                x[i][j] = ((0.8*(xNorm[i][j]-nilai_min))/(nilai_max-nilai_min))+0.1;
                t[i] = xNorm[i][5];
            }
        }
        
        double v[][] = str.readBobotHidden(neuron_hidden, neuron_input);
        double vb[] = str.readBiasHidden();
        double w[][] = str.readBobotOutput(neuron_output, neuron_hidden);
        double wb[] = str.readBiasOutput();
        
        for (int i = 0; i < countRecords; i++) {
            double hasil = 0;
            
            double z[] = new double[10];
            for (int j = 0; j < neuron_hidden; j++) {
                double z_net[] = new double[10];
                double temp = 0;
                for (int k = 0; k < neuron_input; k++) {
                    // System.out.println(v[i][j]);
                    temp = temp + (x[i][k] * v[k][j]);
                    // System.out.println(x[i][k]+" "+v[k][j]);
                }
                z_net[j] = vb[j] + temp;
                z[j] = 1/(1+(Math.exp(-z_net[j])));
            }
            
            double y[] = new double[10];
            for (int j = 0; j < neuron_output; j++) {
                double y_net[] = new double[10];
                double temp = 0;

                for (int k = 0; k < neuron_hidden; k++) {
                    temp = temp + (z[k] * w[j][k]);
                }
                y_net[j] = wb[j] + temp;
                y[j] = 1/(1+(Math.exp(-y_net[j])));
                
                hasil = (((y[j])*(nilai_max-nilai_min)))+(0.8*nilai_min);
                
            }
            prediksi[i] = hasil;
            selisih[i] = Math.abs(hasil - t[i]);
            // System.out.println(hasil+" - "+t[i]+" = "+selisih[i]);
        }
        
        try {
            Statement stm = Koneksi.getConn().createStatement();
            ResultSet rsl = stm.executeQuery("select * from data_ipm");
            
            while (rsl.next()) {
                Object[] obj = new Object[4];
                
                obj[0] = rsl.getString("tahun_data_ipm");
                obj[1] = rsl.getString("t");
//                obj[2] = prediksi[count];
//                obj[3] = selisih[count];
                
                tbDataPrediksi.addRow(obj);
            }
            
            rsl.close();
            stm.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(rootPane, "Gagal Menampilkan Data\n"+e.toString());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Testing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
